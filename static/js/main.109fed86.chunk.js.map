{"version":3,"sources":["components/Radio.js","components/Convert.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Radio","_this$props","this","props","name","id","onChange","preview","react_default","a","createElement","class","type","for","checked","Component","Convert","state","string","handleChange","e","_this","target","value","replace","setState","Object","defineProperty","autocomplete","Form","console","log","_this2","smiles","list","map","n","components_Radio","key","components_Convert","App","className","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OA2BeA,mLAvBJ,IAAAC,EACwBC,KAAKC,MAA5BC,EADDH,EACCG,KAAMC,EADPJ,EACOI,GAAIC,EADXL,EACWK,SACZC,EAAQ,SAAIH,EAClB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SACTH,EAAAC,EAAAC,cAAA,SACEL,GAAIA,EACJM,MAAM,eACNC,KAAK,QACLR,KAAK,OACLE,SAAUA,IAEZE,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SACXH,EAAAC,EAAAC,cAAA,SAAOG,IAAI,OAAOF,MAAM,mBAAmBG,SAAO,GAC/CP,YAjBOQ,oBC8BLC,6MA5BbC,MAAQ,CACNC,OAAQ,MAGVC,aAAe,SAACC,GAAM,IACZf,EAAOgB,EAAKlB,MAAZE,GACFa,EAASE,EAAEE,OAAOC,MAAMC,QAAQ,MAAM,KAAKnB,GACjDgB,EAAKI,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGN,EAAEE,OAAOlB,KAAOc,6EAKnB,OACEV,EAAAC,EAAAC,cAAA,OAAKL,GAAG,WACNG,EAAAC,EAAAC,cAAA,SACEL,GAAK,QACLD,KAAK,SACLwB,aAAa,MACbtB,SAAUJ,KAAKiB,eAGjBX,EAAAC,EAAAC,cAAA,OAAKL,GAAG,UAAUH,KAAKe,MAAMC,gBAxBfH,aCiCPc,oNA9BbZ,MAAQ,CACNL,KAAO,KAETO,aAAe,SAACC,GACdU,QAAQC,IAAIX,EAAEE,OAAOjB,IACrBgB,EAAKI,SAAS,CACZb,KAAOQ,EAAEE,OAAOjB,8EAIX,IAAA2B,EAAA9B,KACHG,EAAK,EACH4B,EAAS,CAAC,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,gBACxCC,EAAOD,EAAOE,IAClB,SAAAC,GAAC,OAAK5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAO/B,SAAU0B,EAAKb,aAAcf,KAAMgC,EAAGE,IAAKjC,EAAIA,GAAIA,QAGlE,OACEG,EAAAC,EAAAC,cAAA,OAAKL,GAAG,QACNG,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,oBACRuB,IAGP1B,EAAAC,EAAAC,cAAC6B,EAAD,CAASlC,GAAI4B,EAAO/B,KAAKe,MAAML,gBAzBpBG,cCaJyB,0LAXX,OACEhC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,UAAQ+B,UAAU,eAClBjC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACgC,EAAD,eANQ3B,cCQE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.109fed86.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Radio extends Component { \n  \n  render() {\n    const { name, id, onChange } = this.props;\n    const preview=\"ㅡ\"+name;\n    return (\n      <div class=\"input\">\n        <input\n          id={id}\n          class=\"radio-button\"\n          type=\"radio\"\n          name=\"{id}\"\n          onChange={onChange} \n        />\n        <div class=\"radio-tile\">\n          <div class=\"icon\"/>\n          <label for=\"{id}\" class=\"radio-tile-label\" checked>\n            {preview}\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Radio;\n","import React, { Component } from \"react\";\n\nclass Convert extends Component {\n  \n  state = {\n    string: \"\"\n  };\n\n  handleChange = (e) => {\n    const { id } = this.props;\n    const string = e.target.value.replace(/\\S/g,\"$&\"+id);\n    this.setState({\n      [e.target.name]: string\n    });\n  };\n  \n  render() {\n    return (\n      <div id=\"convert\">\n        <input \n          id = \"input\"\n          name=\"string\"\n          autocomplete=\"off\"\n          onChange={this.handleChange} \n        />\n\n        <div id=\"result\">{this.state.string}</div>\n      </div>\n    );\n  }\n}\n\nexport default Convert;\n","import React, { Component } from 'react';\nimport Radio from './Radio';\nimport Convert from './Convert';\nimport '../form.css';\nclass Form extends Component {\n  state = {\n    type : 0,\n  }\n  handleChange = (e) => {\n    console.log(e.target.id)\n    this.setState({\n      type : e.target.id\n    })\n  }\n  \n  render() {\n    let id = 0;\n    const smiles = ['꙼̈','̄̈','̐̈','̊̈','̑̈','̤̻','̑̈'];\n    const list = smiles.map(\n      n => (<Radio onChange={this.handleChange} name={n} key={id} id={id++} />)\n    )\n\n    return (\n      <div id=\"form\">\n        <div class=\"container\">\n            <div class=\"radio-tile-group\">\n              {list}\n            </div>\n        </div>\n        <Convert id={smiles[this.state.type]}/>\n      </div>\n    );\n  }\n}\n\nexport default Form;","import React, { Component } from \"react\";\nimport Form from \"./components/Form\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" />\n        <body>\n          <Form/>\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}